@page "/qtas"
@using BlazorApp6.Data
@inject IJSRuntime JSRuntime

<h3>Qtass 25cm</h3>

<TableTemplate Items="forecasts">
    <TableHeader>
        <th class="sort-th" @onclick="@(() => SortTable("Date"))">
            Date
            <span class="oi @(SetSortIcon("Date"))"></span>
        </th>
        <th class="sort-th" @onclick="@(() => SortTable("TemperatureC"))">
            TemperatureC
            <span class="oi @(SetSortIcon("TemperatureC"))"></span>
        </th>
        <th class="sort-th" @onclick="@(() => SortTable("TemperatureF"))">
            TemperatureF
            <span class="oi @(SetSortIcon("TemperatureF"))"></span>
        </th>
        <th class="sort-th" @onclick="@(() => SortTable("Summary"))">
            Summary
            <span class="oi @(SetSortIcon("Summary"))"></span>
        </th>
    </TableHeader>
    <RowTemplate>
        <td>@context.Date</td>
        <td>@context.TemperatureC</td>
        <td>@context.TemperatureF</td>
        <td>@context.Summary</td>
    </RowTemplate>
</TableTemplate>

<button @onclick="@(() => Test())">Test</button>

@code {
    private List<WeatherForecast> forecasts { get; set; } = new List<WeatherForecast>();

    protected override void OnInitialized()
    {
        forecasts = new List<WeatherForecast> {
        new WeatherForecast { Date = DateTime.Now, TemperatureC = 34, Summary = "Test1" },
        new WeatherForecast { Date = DateTime.Now.AddDays(-3), TemperatureC = 15, Summary = "Test2" } };
    }

    private async Task Test() => await JSRuntime.InvokeVoidAsync("test1", forecasts?.Count());

    private void SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            forecasts = forecasts.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if (isSortedAscending)
                forecasts = forecasts.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            else
                forecasts = forecasts.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            isSortedAscending = !isSortedAscending;
        }
    }

    private bool isSortedAscending;
    private string activeSortColumn;
    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
            return string.Empty;
        if (isSortedAscending)
            return "oi-arrow-thick-top";
        else
            return "oi-arrow-thick-bottom";
    }
}
